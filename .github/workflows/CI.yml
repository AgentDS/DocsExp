# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on: [push, pull_request]
  # Triggers the workflow on push or pull request events but only for the main branch
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Display Python version
      #   run: python -c "import sys; print(sys.version)"

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Test with coverage and codecov
        run: |
          pip install coverage
          pip install codecov
          coverage run --source=docsexp setup.py test
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
        #   token: ${{ secrets.CODECOV_TOKEN }}
        #   files: ./coverage1.xml,./coverage2.xml
        #   directory: ./coverage/reports/
        #   flags: unittests
        #   env_vars: OS,PYTHON
          name: codecov-umbrella
          yml: ./codecov.yml
          fail_ci_if_error: true
        #   path_to_write_report: ./coverage/codecov_report.txt
        #   verbose: true
          